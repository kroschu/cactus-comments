# To push to Docker Hub, set the environment variables `RELEASE_REGISTRY_USER`
# and `RELEASE_REGISTRY_PASSWORD` in the Gitlab UI.


variables:
  RELEASE_REGISTRY: docker.io
  RELEASE_REGISTRY_IMAGE: index.docker.io/cactuscomments/cactus-appservice

  IMAGE_SHA: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA}
  IMAGE_ROLLING: ${RELEASE_REGISTRY_IMAGE}:rolling
  IMAGE_VERSION: ${RELEASE_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  IMAGE_LATEST: ${RELEASE_REGISTRY_IMAGE}:latest


stages:
  - lint
  - test
  - build
  - release


.lint-default: &lint-default
  stage: lint
  needs: []
  services: []
  tags:
    - docker


Lint Dockerfiles:
  <<: *lint-default
  image: hadolint/hadolint:latest-alpine
  before_script:
    - apk add fd
  script:
    - echo "Running Hadolint, a Dockerfile linter"
    - echo "For more information about reported errors, visit the Hadolint wiki on https://github.com/hadolint/hadolint/wiki"
    # Run fd without exec arg to produce a list of files to be linted
    - fd Dockerfile
    # Run hadolint on every Dockerfile
    - fd Dockerfile --exec hadolint


Lint shell scripts:
  <<: *lint-default
  image: koalaman/shellcheck-alpine:latest
  before_script:
    - apk add fd
  script:
    - fd --extension sh --exec shellcheck


Lint Python:
  <<: *lint-default
  image: python:3.9.5
  before_script:
    - pip install black flake8 flake8-bugbear flake8-cognitive-complexity flake8-expression-complexity
  script:
    - black --check .
    - flake8 --version
    # app.py has abominable complexity. Work on reducing this.
    - flake8 --max-line-length 107
             --statistics
             --max-cognitive-complexity 88
             --max-expression-complexity 85
             --max-complexity 85
             --ignore E203,W503  # for ``black`` compatibility


Run Tests:
  stage: test
  image: docker/compose:latest
  services:
    - docker:dind
  script:
    - docker-compose up -d --build
    - docker-compose run app coverage run -m pytest --junit-xml=./junit.xml
    - docker-compose run app coverage report
    - docker-compose run app coverage xml
  artifacts:
    paths:
      - coverage.xml
      - junit.xml
    reports:
      junit: junit.xml
      cobertura: coverage.xml


Build:
  stage: build
  needs: []
  image:
    name: gcr.io/kaniko-project/executor:debug-v1.3.0
    entrypoint: [""]
  script:
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination ${IMAGE_SHA}


.release-default: &release-default
  stage: release
  needs:
    - Lint Dockerfiles
    - Lint shell scripts
    - Lint Python
    - Build
    - Run Tests
  image: alpine
  variables:
    GIT_STRATEGY: none  # We do not need the source code
  tags:
    - docker
  before_script:
    - apk add skopeo


Release rolling main:
  <<: *release-default
  rules:
    - if: $CI_COMMIT_REF_NAME == "main"
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_ROLLING}"


Release version:
  <<: *release-default
  rules:
      # Matches <version core> from SemVer 2.0.0 BNF grammar.
      # Ex. 2.3.4, but not 2.3.4-rc
      - if: $CI_COMMIT_TAG =~ /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$/
  script:
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_VERSION}"
    - skopeo copy
      --src-creds=${CI_REGISTRY_USER}:${CI_BUILD_TOKEN}
      --dest-creds=${RELEASE_REGISTRY_USER}:${RELEASE_REGISTRY_PASSWORD}
      "docker://${IMAGE_SHA}"
      "docker://${IMAGE_LATEST}"
